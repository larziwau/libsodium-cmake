name: CI

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  ci:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    env:
      CTEST_OUTPUT_ON_FAILURE: ON
      CTEST_PARALLEL_LEVEL: 2

    strategy:
      fail-fast: false
      matrix:
        include:
          - name: GCC Static
            os: ubuntu-latest
            compiler: gcc
            generator: Ninja
            cmake-args: "-DBUILD_SHARED_LIBS=OFF"
          - name: GCC Dynamic
            os: ubuntu-latest
            compiler: gcc
            generator: Ninja
            cmake-args: "-DBUILD_SHARED_LIBS=ON"
          - name: GCC Minimal
            os: ubuntu-latest
            compiler: gcc
            generator: Ninja
            cmake-args: "-DSODIUM_MINIMAL=ON"
          - name: Clang Static
            os: ubuntu-latest
            compiler: clang
            generator: Ninja
            cmake-args: "-DBUILD_SHARED_LIBS=OFF"
          - name: Clang Dynamic
            os: ubuntu-latest
            compiler: clang
            generator: Ninja
            cmake-args: "-DBUILD_SHARED_LIBS=ON"
          - name: Clang Minimal
            os: ubuntu-latest
            compiler: clang
            generator: Ninja
            cmake-args: "-DSODIUM_MINIMAL=ON"
          - name: MSVC x86
            os: windows-latest
            generator: Visual Studio 17 2022
            cmake-args: "-A Win32"
          - name: MSVC x64
            os: windows-latest
            generator: Visual Studio 17 2022
            cmake-args: "-A x64"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Setup Python modules
        run: pip install cmake==3.31.2 ninja==1.11.1.3 --upgrade

      - run: echo "CC=${{ matrix.compiler }}" >> $GITHUB_ENV
        if: startsWith(matrix.os, 'ubuntu')

      - name: Update submodules
        run: git submodule update --remote --recursive

      - run: cmake -Wdev -Werror=dev -S . -B build -G "${{ matrix.generator }}" ${{ matrix.cmake-args }}

      - name: Build
        run: cmake --build build

      - name: Ubuntu debug
        run: (cd build && ctest)
        if: startsWith(matrix.os, 'ubuntu')

      - name: Windows debug
        run: (cd build && ctest -C Debug)
        if: startsWith(matrix.os, 'windows')
